seed = 12345)
#expression data
load(file = "/Users/than/Dropbox/research/work_draft/expression_data_subgroups.rda")
#candidate ffls
load(file = "/Users/than/Dropbox/research/work_draft/candidate_ffls_mirna_tiny.rda")
load(file = "/Users/than/Dropbox/research/work_draft/candidate_ffls_tf_tiny.rda")
library(parallel)
library(foreach)
library(doParallel)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(miRBaseConverter)
name_g1 <- "t1114"
mirna_expr_g1 <- miRNA_t1114
mrna_expr_g1 <- mRNA_t1114
name_g2 <- "nont1114"
mirna_expr_g2 <- miRNA_nont1114
mrna_expr_g2 <- miRNA_nont1114
ffl_type <- "miRNA"
candidate_ffls <- candidate_ffls_mirna_tiny
first_row <- 1
last_row <- nrow(candidate_ffls)
num_bootstrap_samples <- 100
num_permutations <- 100
seed <- 12345
i <- 1
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
row
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
mirna_g1
dim(mirna_g1)
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
dim(tf_g1)
dim(targetgene_g1)
tf_g1
targetgene_g1
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
dim(mirna_g2)
dim(tf_g2)
dim(targetgene_g2)
class(targetgene_g2)
mirna_g2
head(tf_g2)
top()
top(tf_g2)
tf_g2[1:10]
tf_g2
dim(mrna_expr_g2)
View(mrna_expr_g2)
mrna_expr_g2 <- mRNA_nont1114
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
tf_g2
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
targetgene_g2
#####mediation function (mirna-ffls)
mediation_ffl <- function(mirna, tf, targetgene, ffl_type = c("miRNA", "TF")){
###mirna-ffl
if(ffl_type == "miRNA"){
#model1: M ~ X (tf ~ mirna)
model1 <- lm(tf ~ mirna)
alpha1 <- summary(model1)$coefficients["mirna", ]
alpha1_crit <- alpha1["Estimate"] < 0
#model2: Y ~ X (targetgene ~ mirna)
model2 <- lm(targetgene ~ mirna)
beta1 <- summary(model2)$coefficients["mirna", ]
beta1_crit <- beta1["Estimate"] < 0
#model3: Y ~ X + M (targetgene ~ mirna + tf)
model3 <- lm(targetgene ~ mirna + tf)
gamma1 <- summary(model3)$coefficients["mirna", ]
gamma2 <- summary(model3)$coefficients["tf", ]
gamma1_crit <- (gamma1["Estimate"] < 0) & (abs(gamma1["Estimate"]) < abs(beta1["Estimate"]))
gamma2_crit <- gamma2["Estimate"] > 0
}
###tf-ffls
if(ffl_type == "TF"){
#model1: M ~ X (mirna ~ tf)
model1 <- lm(mirna ~ tf)
alpha1 <- summary(model1)$coefficients["tf", ]
alpha1_crit <- alpha1["Estimate"] > 0
#model2: Y ~ X (targetgene ~ tf)
model2 <- lm(targetgene ~ tf)
beta1 <- summary(model2)$coefficients["tf", ]
beta1_crit <- beta1["Estimate"] > 0
#model3: Y ~ X + M (gene ~ tf + mirna)
model3 <- lm(targetgene ~ tf + mirna)
gamma1 <- summary(model3)$coefficients["tf", ]
gamma2 <- summary(model3)$coefficients["mirna", ]
gamma1_crit <- (gamma1["Estimate"] > 0) & (abs(gamma1["Estimate"]) < abs(beta1["Estimate"]))
gamma2_crit <- gamma2["Estimate"] < 0
}
#determine if candidate ffl meets mediation conditions
meet_conditions <- alpha1_crit & beta1_crit & gamma1_crit & gamma2_crit
return(meet_conditions)
}
#####bootstrap function
bootstrap_stat <- function(data, indices, ffl_type){
if(ffl_type == "miRNA"){
d <- data[indices, ] #allows boot to select sample
#model1: M ~ X (tf ~ mirna)
model1 <- lm(tf ~ mirna, data = d)
alpha1 <- summary(model1)$coefficients["mirna", ]
alpha1_crit <- alpha1["Estimate"] < 0
#model2: Y ~ X (targetgene ~ mirna)
model2 <- lm(targetgene ~ mirna, data = d)
beta1 <- summary(model2)$coefficients["mirna", ]
beta1_crit <- beta1["Estimate"] < 0
#model3: Y ~ X + M (targetgene ~ mirna + tf)
model3 <- lm(targetgene ~ mirna + tf, data = d)
gamma1 <- summary(model3)$coefficients["mirna", ]
gamma2 <- summary(model3)$coefficients["tf", ]
gamma1_crit <- (gamma1["Estimate"] < 0) & (abs(gamma1["Estimate"]) < abs(beta1["Estimate"]))
gamma2_crit <- gamma2["Estimate"] > 0
}
if(ffl_type == "TF"){
d <- data[indices, ] #allows boot to select sample
#model1: M ~ X (mirna ~ tf)
model1 <- lm(mirna ~ tf, data = d)
alpha1 <- summary(model1)$coefficients["tf", ]
alpha1_crit <- alpha1["Estimate"] > 0
#model2: Y ~ X (targetgene ~ tf)
model2 <- lm(targetgene ~ tf, data = d)
beta1 <- summary(model2)$coefficients["tf", ]
beta1_crit <- beta1["Estimate"] > 0
#model3: Y ~ X + M (targetgene ~ tf + mirna)
model3 <- lm(targetgene ~ tf + mirna, data = d)
gamma1 <- summary(model3)$coefficients["tf", ]
gamma2 <- summary(model3)$coefficients["mirna", ]
gamma1_crit <- (gamma1["Estimate"] > 0) & (abs(gamma1["Estimate"]) < abs(beta1["Estimate"]))
gamma2_crit <- gamma2["Estimate"] < 0
}
#determine if candidate ffl meets mediation model conditions
meet_conditions <- alpha1_crit & beta1_crit & gamma1_crit & gamma2_crit
return(meet_conditions)
}
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g1
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions_g2
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
ffl_meet_conditions
row[["mediation_conditions"]] <- ffl_meet_conditions
row
View(row)
i <- 2
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 3
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 4
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 5
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 6
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 7
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 8
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
i <- 9
######step1. identify candidate ffl: extract mirna, tf, and targetgene expression levels
row <- candidate_ffls[i, ] #row is the candidate ffl
#group1
mirna_g1 <- t(mirna_expr_g1[row[["mirna"]], ])
tf_g1 <- t(mrna_expr_g1[row[["tf"]], ])
targetgene_g1 <- t(mrna_expr_g1[row[["targetgene"]], ])
#group2
mirna_g2 <- t(mirna_expr_g2[row[["mirna"]], ])
tf_g2 <- t(mrna_expr_g2[row[["tf"]], ])
targetgene_g2 <- t(mrna_expr_g2[row[["targetgene"]], ])
#####step2. determine whether candidate ffl meets mediation model conditions
ffl_meet_conditions_g1 <- mediation_ffl(mirna = mirna_g1, tf = tf_g1, targetgene = targetgene_g1, ffl_type = ffl_type)
ffl_meet_conditions_g2 <- mediation_ffl(mirna = mirna_g2, tf = tf_g2, targetgene = targetgene_g2, ffl_type = ffl_type)
ffl_meet_conditions <- ffl_meet_conditions_g1 & ffl_meet_conditions_g2
row[["mediation_conditions"]] <- ffl_meet_conditions
ffl_meet_conditions
print(paste0("*candidate FFL meets mediation model conditions: ", i, " / ", last_row, sep = ""))
#####step3. calculate p(FFL) if candidate ffl meets mediation model conditions
#create expression df (expr_data)
expr_data_g1 <- data.frame(mirna_g1, tf_g1, targetgene_g1) #group1
colnames(expr_data_g1) <- c("mirna", "tf", "targetgene")
expr_data_g2 <- data.frame(mirna_g2, tf_g2, targetgene_g2) #group2
colnames(expr_data_g2) <- c("mirna", "tf", "targetgene")
#bootstrap to calculate p(FFL)
boostrap_results_g1 <- boot::boot(data = expr_data_g1, statistic = bootstrap_stat,
R = num_bootstrap_samples, ffl_type = ffl_type,
parallel = "multicore")
boostrap_results_g2 <- boot::boot(data = expr_data_g2, statistic = bootstrap_stat,
R = num_bootstrap_samples, ffl_type = ffl_type,
parallel = "multicore")
boostrap_results_g1
boostrap_results_g2
class(boostrap_results_g1[[2]])
VieW(boostrap_results_g1[[2]])
View(boostrap_results_g1[[2]])
obs_delta_pffl <- mean(boostrap_results_g1[[2]]) - mean(boostrap_results_g2[[2]])
obs_delta_pffl
#####step4. calculate p-value if candidate ffls meets mediation model conditions
#create empty vectors to store results
perm_mirna_vector <- rep(NA, ceiling(num_permutations/4))
perm_tf_vector <- rep(NA, ceiling(num_permutations/4))
perm_targetgene_vector <- rep(NA, ceiling(num_permutations/4))
perm_all_vector <- rep(NA, ceiling(num_permutations/4))
perm_mirna <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = expr_data_g1$tf, targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = expr_data_g2$tf, targetgene = expr_data_g2$targetgene))
dim(perm_mirna)
length(perm_mirna)
class(perm_mirna)
class(perm_mirna[[``]])
class(perm_mirna[[1]])
View(perm_mirna[[1]])
###a. permute data -- shuffle 1) mirna; 2) tf; 3) targetgene; 4) mirna and tf
perm_mirna <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = expr_data_g1$tf, targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = expr_data_g2$tf, targetgene = expr_data_g2$targetgene))
perm_tf <- list(data.frame(mirna = expr_data_g1$mirna, tf = sample(expr_data_g1$tf), targetgene = expr_data_g1$targetgene),
data.frame(mirna = expr_data_g2$mirna, tf = sample(expr_data_g2$tf), targetgene = expr_data_g2$targetgene))
perm_targetgene <- list(data.frame(mirna = expr_data_g1$mirna, tf = expr_data_g1$tf, targetgene = sample(expr_data_g1$targetgene)),
data.frame(mirna = expr_data_g2$mirna, tf = expr_data_g2$tf, targetgene = sample(expr_data_g2$targetgene)))
perm_all <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = sample(expr_data_g1$tf), targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = sample(expr_data_g2$tf), targetgene = expr_data_g2$targetgene))
class(boostrap_results_g1)
boostrap_results_g1
boostrap_results_g1[[2]]
boostrap_results_g1[["results"]]
length(boostrap_results_g1[[2]])
length(boostrap_results_g1)
names(boostrap_results_g1[[2]])
#########conduct permutations
perm = 1
###a. permute data -- shuffle 1) mirna; 2) tf; 3) targetgene; 4) mirna and tf
perm_mirna <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = expr_data_g1$tf, targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = expr_data_g2$tf, targetgene = expr_data_g2$targetgene))
perm_tf <- list(data.frame(mirna = expr_data_g1$mirna, tf = sample(expr_data_g1$tf), targetgene = expr_data_g1$targetgene),
data.frame(mirna = expr_data_g2$mirna, tf = sample(expr_data_g2$tf), targetgene = expr_data_g2$targetgene))
perm_targetgene <- list(data.frame(mirna = expr_data_g1$mirna, tf = expr_data_g1$tf, targetgene = sample(expr_data_g1$targetgene)),
data.frame(mirna = expr_data_g2$mirna, tf = expr_data_g2$tf, targetgene = sample(expr_data_g2$targetgene)))
perm_all <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = sample(expr_data_g1$tf), targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = sample(expr_data_g2$tf), targetgene = expr_data_g2$targetgene))
###b. calculate delta-p(FFL) of permuted data -- through bootstrapping
boostrap_perm_mirna <- list(boot::boot(data = perm_mirna[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_mirna[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
boostrap_perm_tf <- list(boot::boot(data = perm_tf[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_tf[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
boostrap_perm_targetgene <- list(boot::boot(data = perm_targetgene[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_targetgene[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
boostrap_perm_all <- list(boot::boot(data = perm_all[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_all[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
length(boostrap_perm_mirna)
class(boostrap_perm_mirna)
list.names(boostrap_perm_mirna)
#store results
perm_mirna_vector[perm] <- mean(boostrap_perm_mirna[[1]][[2]]) - mean(boostrap_perm_mirna[[2]][[2]])
perm_tf_vector[perm] <- mean(boostrap_perm_tf[[1]][[2]]) - mean(boostrap_perm_tf[[2]][[2]])
perm_targetgene_vector[perm] <- mean(boostrap_perm_targetgene[[1]][[2]]) - mean(boostrap_perm_targetgene[[2]][[2]])
perm_all_vector[perm] <- mean(boostrap_perm_all[[1]][[2]]) - mean(boostrap_perm_all[[2]][[2]])
perm_mirna_vector
perm_tf_vector
perm_targetgene_vector
perm_all_vector
boostrap_perm_mirna[[1]][["t"]]
#conduct permutations
for(perm in 1:ceiling(num_permutations/4)){
###a. permute data -- shuffle 1) mirna; 2) tf; 3) targetgene; 4) mirna and tf
perm_mirna <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = expr_data_g1$tf, targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = expr_data_g2$tf, targetgene = expr_data_g2$targetgene))
perm_tf <- list(data.frame(mirna = expr_data_g1$mirna, tf = sample(expr_data_g1$tf), targetgene = expr_data_g1$targetgene),
data.frame(mirna = expr_data_g2$mirna, tf = sample(expr_data_g2$tf), targetgene = expr_data_g2$targetgene))
perm_targetgene <- list(data.frame(mirna = expr_data_g1$mirna, tf = expr_data_g1$tf, targetgene = sample(expr_data_g1$targetgene)),
data.frame(mirna = expr_data_g2$mirna, tf = expr_data_g2$tf, targetgene = sample(expr_data_g2$targetgene)))
perm_all <- list(data.frame(mirna = sample(expr_data_g1$mirna), tf = sample(expr_data_g1$tf), targetgene = expr_data_g1$targetgene),
data.frame(mirna = sample(expr_data_g2$mirna), tf = sample(expr_data_g2$tf), targetgene = expr_data_g2$targetgene))
###b. calculate delta-p(FFL) of permuted data -- through bootstrapping
boostrap_perm_mirna <- list(boot::boot(data = perm_mirna[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_mirna[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
boostrap_perm_tf <- list(boot::boot(data = perm_tf[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_tf[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
boostrap_perm_targetgene <- list(boot::boot(data = perm_targetgene[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_targetgene[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
boostrap_perm_all <- list(boot::boot(data = perm_all[[1]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"),
boot::boot(data = perm_all[[2]], statistic = bootstrap_stat, R = num_bootstrap_samples, ffl_type = ffl_type, parallel = "multicore"))
#store results
perm_mirna_vector[perm] <- mean(boostrap_perm_mirna[[1]][["t"]]) - mean(boostrap_perm_mirna[[2]][["t"]])
perm_tf_vector[perm] <- mean(boostrap_perm_tf[[1]][["t"]]) - mean(boostrap_perm_tf[[2]][["t"]])
perm_targetgene_vector[perm] <- mean(boostrap_perm_targetgene[[1]][["t"]]) - mean(boostrap_perm_targetgene[[2]][["t"]])
perm_all_vector[perm] <- mean(boostrap_perm_all[[1]][["t"]]) - mean(boostrap_perm_all[[2]][["t"]])
}
#calculate p-value/percentile of observed p(FFL) among null p(FFL)s (2-sided permutation p-value)
null_delta_pffls <- c(perm_mirna_vector, perm_tf_vector, perm_targetgene_vector, perm_all_vector)
obs_pffl
null_delta_pffls
obs_delta_pffl
abs(null_delta_pffls)
abs(obs_delta_pffl)
p_val <- mean(abs(null_delta_pffls) >= abs(obs_delta_pffl))
p_val
row[["p_value"]] <- p_val
hist(null_delta_pffls)
hist(null_delta_pffls, vline = p_val)
hist(null_delta_pffls) + abline(h = p_val)
print(paste0(i, " / ", last_row, sep = ""))
print(paste0("analyzing candidate FFL ", i, " / ", last_row, sep = ""))
print(paste0("analyzing candidate FFL ", i, "/", last_row, sep = ""))
print(paste0("*****analyzing candidate FFL: ", i, " / ", last_row, sep = ""))
print(paste0("*****analyzing candidate FFL: ", i, " / ", last_row, "-- meets mediation model conditions", sep = ""))
print(paste0("candidate FFL: ", i, " / ", last_row, sep = ""))
print(paste0("candidate FFL: ", i, " / ", last_row, sep = ""))
print(paste0("analyzing candidate FFL: ", i, " / ", last_row, sep = ""))
print(paste0("analyzing candidate FFL -- ", i, " / ", last_row, sep = ""))
print(paste0("*****analyzing candidate FFL -- ", i, " / ", last_row, "-- meets mediation model conditions", sep = ""))
print(paste0("analyzing candidate FFL ", i, " / ", last_row, sep = ""))
print(paste0("*****analyzing candidate FFL ", i, " / ", last_row, "-- meets mediation model conditions", sep = ""))
print(paste0("*****analyzing candidate FFL ", i, " / ", last_row, " -- meets mediation model conditions", sep = ""))
print(paste0("candidate FFL ", i, " / ", last_row, "does not meet mediation model conditions" sep = ""))
print(paste0("candidate FFL ", i, " / ", last_row, "does not meet mediation model conditions", sep = ""))
print(paste0("candidate FFL ", i, " / ", last_row, " does not meet mediation model conditions", sep = ""))
print(paste0("candidate FFL ", i, " / ", last_row, ": does not meet mediation model conditions", sep = ""))
print(paste0("*****candidate FFL ", i, " / ", last_row, ": meets mediation model conditions", sep = ""))
install.packages("remotes")
remotes::install_github("NSAPH/airpred")
library(airpred)
air_clean
dim(airpred_clean)
?airpred_clean
View(airpred_clean)
sum(is.na(airpred_clean))
colnames(airpred_clean)
#databases
load(file = "/Users/than/Dropbox/research/work_draft/databases/tf_mirna_db.rda")
load(file = "/Users/than/Dropbox/research/work_draft/databases/tf_targetgene_db.rda")
load(file = "/Users/than/Dropbox/research/work_draft/databases/mirna_targetgene_db.rda")
#mirna, tf, targetgene lists
load(file = "/Users/than/Dropbox/research/work_draft/databases/names_tf_db.rda")
load(file = "/Users/than/Dropbox/research/work_draft/databases/names_mirna_db.rda")
load(file = "/Users/than/Dropbox/research/work_draft/databases/names_targetgene_db.rda")
#expression data
load(file = "/Users/than/Dropbox/research/work_draft/expression_data_subgroups.rda")
#candidate ffls
load(file = "/Users/than/Dropbox/research/work_draft/candidate_ffls_mirna_tiny.rda")
load(file = "/Users/than/Dropbox/research/work_draft/candidate_ffls_tf_tiny.rda")
load(file = "/Users/than/Dropbox/research/work_draft/candidate_ffls_tf_tiny2.rda")
#####candidate mirna ffls -- all
mirna_tf <- mirna_targetgene[mirna_targetgene$targetgene %in% names_tf_db, ]
#####candidate tf ffls -- all
tf_mirna <- tf_mirna_db[(tf_mirna_db$tf %in% rownames(mRNA_t1114)) & (tf_mirna_db$mirna %in% rownames(miRNA_t1114)), ]
tf_targetgene <- tf_targetgene_db[(tf_targetgene_db$tf %in% rownames(mRNA_t1114)) & (tf_targetgene_db$targetgene %in% rownames(mRNA_t1114)), ]
mirna_targetgene <- mirna_targetgene_db[(mirna_targetgene_db$mirna %in% rownames(miRNA_t1114)) & (mirna_targetgene_db$targetgene %in% rownames(mRNA_t1114)), ]
#####candidate mirna ffls -- all
mirna_tf <- mirna_targetgene[mirna_targetgene$targetgene %in% names_tf_db, ]
colnames(mirna_tf) <- c("mirna", "tf", "TARGETSCAN", "MIRTARBASE", "MIRDB", "MIRANDA")
#create all possible loops -- merge on mirna
candidate_ffls_mirna_all <- merge(x = mirna_tf, y = tf_targetgene, by = "tf")
#####candidate mirna ffls -- all
mirna_tf <- mirna_targetgene[mirna_targetgene$targetgene %in% names_tf_db, ]
colnames(mirna_tf) <- c("mirna", "tf", "TARGETSCAN", "MIRTARBASE", "MIRDB", "MIRANDA")
#create all possible loops -- merge on mirna
candidate_ffls_mirna_all <- merge(x = mirna_tf, y = tf_targetgene, by = "tf")
R.version
updateR()
install.packages("installr")
R.version
install.packages("devtools")
devtools::install_github("vitessce/vitessce-r")
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
install.packages("cachem")
devtools::install_github("vitessce/vitessce-r")
library(cachem)
devtools::install_github("vitessce/vitessce-r")
devtools::install_github("vitessce/vitessce-r")
library(vitessce)
library(Seurat)
library(devtools)
install.packages("devtools")
devtools::install_github("vitessce/vitessce-r")
library(cache)
library(cachem)
install.packages("cachem")
library(cachem)
devtools::install_github("vitessce/vitessce-r")
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
pkgbuild::check_build_tools(debug = TRUE)
options(buildtools.check = function(action) TRUE)
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
library(devtools)
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
devtools::install_github("r-lib/pkgbuild")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
library(vitessce)
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
install.packages("pkgbuild")
install.packages("pkgbuild")
devtools::install_github("satijalab/seurat", ref = "release/4.0.0")
library(pkgbuild)
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all()
library(devtools)
devtools::load_all()
shiny::runApp('Dropbox/ddesktop/lab-gehlenborg/vitessce-shiny')
